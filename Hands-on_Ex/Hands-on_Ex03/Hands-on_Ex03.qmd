---
title: "Handson_Ex03"
author: "Hou Tao"
date: "3 Feb 2023"
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## 1. Import Library and Data

installing and loading the required libraries

```{r, warning=FALSE}
pacman::p_load(ggplot2, ggiraph, plotly, gganimate, tidyverse, ggthemes, patchwork, crosstalk, htmltools, gganimate, gifski, gapminder, readxl, countrycode, rPackedBar)
```

import data

```{r, warning=FALSE}
exam_data <- read_csv("data/Exam_data.csv", show_col_types = FALSE)

```

## 1 Interactive Data Visualisation - ggiraph methods - tooltips

### 1.1 Tooltip effect with tooltip aesthetic

```{r, warning=FALSE}

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
      geom_dotplot_interactive(
        aes(tooltip = ID),
        stackgroups = TRUE,
        binwidth = 1,
        method = "histodot") +
      scale_y_continuous(NULL, 
                         breaks = NULL)
  
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6 * 0.618
)

```

### 1.2 Displaying multiple information on tooltip

```{r, warning=FALSE}
## custom tooltip
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID, 
  "\n Class = ", exam_data$CLASS
))

## plot
p <- ggplot(data = exam_data, 
            aes(x = MATHS)) +
      geom_dotplot_interactive(
          aes(tooltip = exam_data$tooltip), 
          stackgroups = TRUE,
          binwidth = 1, 
          method = "histodot") +
      scale_y_continuous(NULL, breaks = NULL)

## display html
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8 * 0.618
)

```

### 1.3 Customising Tooltip style

```{r, warning=FALSE}
## custom tooltip style
tooltipcss <- "background-color:white; font-style:bold; color:back; font-family:	Calibri Light;"

## custom tooltip
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID, 
  "\n Class = ", exam_data$CLASS
))

## plot
p <- ggplot(data = exam_data, 
            aes(x = MATHS)) +
      geom_dotplot_interactive(
          aes(tooltip = exam_data$tooltip), 
          stackgroups = TRUE,
          binwidth = 1, 
          method = "histodot") +
      scale_y_continuous(NULL, breaks = NULL)

## display html
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8 * 0.618,
  options = list(
    opts_tooltip(
      css = tooltipcss
    )
  )
)

```

### 1.4 Displaying statistics on tooltip

```{r, warning=FALSE}
## custom tooltip style
tooltipcss <- "background-color:#728FCE; font-color:blue, font-style:bold; color:back; font-family:	Calibri Light;"

statstips <- function(y, ymax, accuracy = 0.01){
  mean <- scales::number(y, accuracy = accuracy)
  sem  <- scales::number(ymax - y, accuracy =  accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data = exam_data, aes(x = RACE)) +
  
  stat_summary(aes(y = MATHS, tooltip = after_stat(statstips(y, ymax))),
               fun.data = "mean_se",
               geom = GeomInteractiveCol,
               fill = "light blue") +
  
  stat_summary(aes(y = MATHS),
               fun.data = "mean_se",
               geom = "errorbar",
               width = 0.35,
               size = 0.35
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8 * 0.618,
       options = list(
          opts_tooltip(
            css = tooltipcss
          )
       )
)

```

### 1.5 Hover effect with data_id aesthetic

```{r, warning=FALSE}
## plot
p <- ggplot(data = exam_data, 
            aes(x = MATHS)) +
      geom_dotplot_interactive(
          aes(data_id = CLASS, colour = factor(CLASS)), 
          stackgroups = TRUE,
          binwidth = 1, 
          method = "histodot") +
      scale_y_continuous(NULL, breaks = NULL)+ 
      scale_fill_manual()

## display html
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8 * 0.618,
  options = list(
    opts_hover(css = "fill: #202020;"),
    opts_hover_inv(css = "opacity:0.1;")
  )
)

```

### 1.6 Combining tooltip and hover effect

```{r, warning=FALSE}
## plot
p <- ggplot(data = exam_data, 
            aes(x = MATHS)) +
      geom_dotplot_interactive(
          aes(tooltip = CLASS, data_id = CLASS, colour = factor(CLASS)), 
          stackgroups = TRUE,
          binwidth = 1, 
          method = "histodot") +
      scale_y_continuous(NULL, breaks = NULL) + 
      scale_fill_manual()

## display html
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8 * 0.618,
  options = list(
    opts_hover(css = "fill: #202020;"),
    opts_hover_inv(css = "opacity:0.1;")
  )
)

## Q: how to fill the color for different "data-id"

```

### 1.7 Click effect with onclick

```{r, warning=FALSE}

exam_data$onclick <- sprintf("window.open(\"%s\\%s\")",
                             "https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
                             as.character(exam_data$ID))


## plot
p <- ggplot(data = exam_data, 
            aes(x = MATHS)) +
      geom_dotplot_interactive(
          aes(tooltip = CLASS, data_id = CLASS, onclick = onclick, colour = factor(CLASS)), 
          stackgroups = TRUE,
          binwidth = 1, 
          method = "histodot") +
      scale_y_continuous(NULL, breaks = NULL) + 
      scale_fill_manual()

## display html
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8 * 0.618,
  options = list(
    opts_hover(css = "fill: #202020;"),
    opts_hover_inv(css = "opacity:0.1;")
  )
)

```

### 1.8 Coordinated Multiple Views with ggiraph

```{r, fig.height=15, fig.width=20}

p1 <- ggplot(data = exam_data, aes(x = MATHS)) +
        geom_dotplot_interactive(
          aes(data_id = ID),
          stackgroups = TRUE,
          binwidth = 1,
          method = "histodot"
        ) +
      coord_cartesian(xlim = c(0, 100)) +
      scale_y_continuous(NULL, breaks = NULL) + 
      scale_fill_manual()

p2 <- ggplot(data = exam_data, 
             aes(x = ENGLISH)) +
        geom_dotplot_interactive(
          aes(data_id = ID),
          stackgroups = TRUE,
          binwidth = 1,
          method = "histodot"
        ) +
      coord_cartesian(xlim=c(0,100)) +
      scale_y_continuous(NULL, breaks = NULL)

girafe(code = print(p1 / p2),
       width_svg =  8,
       height_svg = 5,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
       )
)

```

## 2. Interactive Data Visualisation - plotly methods!

```{r, warning=FALSE}

plot_ly(data = exam_data, 
         x = ~MATHS, 
         y = ~ENGLISH,
        type = "scatter",
        mode = "markers",
        color = ~RACE,
        colors = "Set1"
        )


```

### 2.1 Customising colour scheme: plot_ly() method

```{r, warning=FALSE}

pal <- c("red", "purple", "blue", "green")

plot_ly(data = exam_data, 
         x = ~MATHS, 
         y = ~ENGLISH,
        type = "scatter",
        mode = "markers",
        color = ~RACE,
        colors = pal
        )


```

### 2.2 Customising tooltip: plot_ly() method

```{r, warning=FALSE}

pal <- c("red", "purple", "blue", "green")

plot_ly(data = exam_data, 
         x = ~MATHS, 
         y = ~ENGLISH,
        text = ~paste("Student ID:", ID, "<br>Class:", CLASS),
        type = "scatter",
        mode = "markers",
        color = ~RACE,
        colors = pal
        )


```

### 2.3 Working with layout: plot_ly() method

More about laytout: https://plotly.com/r/reference/#Layout_and_layout_style_objects

```{r, warning=FALSE}

pal <- c("red", "purple", "blue", "green")

plot_ly(data = exam_data, 
         x = ~MATHS, 
         y = ~ENGLISH,
        text = ~paste("Student ID:", ID, "<br>Class:", CLASS),
        type = "scatter",
        mode = "markers",
        color = ~RACE,
        colors = pal
        ) %>%
  layout(
    title = "English score versus Maths Score",
    xaxis = list(range = c(0, 100)),
    yaxis = list(range = c(0, 100))
  )

```

### 2.4 Creating an interactive scatter plot: ggplotly() method

```{r, warning=FALSE}

p <- ggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100))

ggplotly(p)


```

### 2.5 Coordinated Multiple Views with plotly

```{r, warning=FALSE}
p1 <- ggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100))

p2 <- ggplot(data = exam_data, aes(x = MATHS, y = SCIENCE)) +
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100))

subplot(ggplotly(p1), ggplotly(p2))

```

## 3. Interactive Data Visualisation - crosstalk methods!

### 3.1 Interactive Data Table: DT package

```{r, warning=FALSE}
t <- DT::datatable(exam_data, class="compact")
t
```

### 3.2 Linked brushing: crosstalk method

```{r, fig.width=30}

d <- highlight_key(exam_data)

t <- DT::datatable(d)

p <- ggplot(d, aes(ENGLISH, MATHS)) + 
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100))

g <- highlight(ggplotly(p), off="plotly_doubleclick")

bscols(widths = c(5, 7), g, t)

```

## 4. Animated Data Visualisation: gganimate methods

gganimate: An ggplot extension for creating animated statistical graphs.

gifski: converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

gapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.

### 4.1 Import Data

```{r, warning=FALSE}

col <- c("Country", "Continent")

globalPop <- read_xls("data/GlobalPopulation.xls", sheet="Data") %>%
  
  mutate_each_(funs(factor(.)), col) %>%
  
  mutate(Year = as.integer(Year))

```

### 4.2 Building a static population bubble plot

```{r, warning=FALSE}

ggplot(globalPop, aes(x = Old, y = Young, size = Population, colour = Country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_color_manual(values = country_colors) + 
  scale_size(range = c(2, 12)) + 
  labs(title = "Year: {frame_time}", x = "% Aged", y = "% Young") 

```

### 4.3 Building the animated bubble plot

```{r, warning=FALSE}

ggplot(globalPop, aes(x = Old, y = Young, size = Population, colour = Country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_color_manual(values = country_colors) + 
  scale_size(range = c(2, 12)) + 
  labs(title = "Year: {frame_time}", x = "% Aged", y = "% Young")+
  transition_time(Year) + 
  ease_aes('linear')

```

## 5. Visualising Large Data Interactively

### 5.1 Import Data

```{r, warning=FALSE}
GDP <- read_csv("data/GDP.csv", show_col_types = FALSE)

WorldCountry <- read_csv("data/WorldCountry.csv", show_col_types = FALSE)

```

```{r, warning=FALSE}

GDP_selected <- GDP %>%
  
  mutate(Values = as.numeric(`2000`)) %>%
  
  select(1:3, Values) %>%
  
  pivot_wider(names_from = `Series Name`, values_from = `Values`) %>%
  
  left_join(y = WorldCountry, by = c("Country Code" = "ISO-alpha3 Code"))


DT::datatable(GDP_selected)
```

### 5.2 Data Preparation

```{r, warning=FALSE}

GDP_selected <- GDP %>%
  
  mutate(Values = as.numeric(`2000`)) %>%
  
  filter(`Series Name` == "GDP (current US$)") %>%
  
  select(1:3, Values) %>%
  
  pivot_wider(names_from = `Series Name`, values_from = `Values`) %>%
  
  left_join(y = WorldCountry, by = c("Country Code" = "ISO-alpha3 Code")) %>%
  
  na.omit()

DT::datatable(GDP_selected)


```

### 5.3 Building a packed bar by using rPackedBar package

```{r, warning=FALSE}

p <- plotly_packed_bar(
  input_data = GDP_selected,
  label_column = "Country Name",
  value_column = "GDP (current US$)",
  number_rows = 10,
  plot_title = "Top 10 countries by GDP, 2020",
  xaxis_label = "GDP (US$)",
  hover_label = "GDP (current US$)",
  min_label_width = 0.0001,
  color_bar_color = "#002366",
  label_color = "white")

plotly::config(p, displayModeBar = FALSE)

```
