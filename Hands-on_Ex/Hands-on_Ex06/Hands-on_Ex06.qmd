---
title: "Handson_Ex06"
author: "Hou Tao"
date: "17 Feb 2023"
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

# Import Libraries

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)
```

# Import Data

```{r}
attacks <- read_csv("data/eventlog.csv", show_col_types = FALSE)
```

### Check Data Structure

```{r}
kable(head(attacks))
```

### Derivig weekday and Hour of day fields

```{r}
make_hr_wkday <- function(ts, sc, tz){
  real_times <- ymd_hms(ts, tz = tz[1], quiet = TRUE)
  
  dt <- data.table(source_country = sc, wkday = weekdays(real_times), hour = hour(real_times))
  
  return(dt)
}
```

### Deriving the attacks tibble data frame

```{r}

wkday_levels <- c('Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday')


attacks <- attacks %>%
  
  group_by(tz) %>%
  
  do(make_hr_wkday(.$timestamp, .$source_country, .$tz)) %>%
  
  ungroup() %>%
  
  mutate(wkday = factor(wkday, levels = wkday_levels),
         hour = factor(hour, levels = 0:23)
  )


```

### Building the Calendar heatmaps

```{r}

grouped <- attacks %>%
  count(wkday, hour) %>%
  ungroup() %>%
  na.omit()

ggplot(grouped, aes(hour, wkday, fill = n)) + 
  geom_tile(color = "white", linewidth = 0.1) +
  
  theme_tufte() +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low  = "sky blue",
                      high = "dark blue") +
  labs(x = NULL, y = NULL,
       title = "Attacks by weekday and time of day")+
  
  theme(axis.ticks = element_blank(), 
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6)
        )

```

# Plotting Multiple Calendar Heatmaps

### Deriving attack by country object

```{r}

attacks_by_country <- count(attacks, source_country) %>%
  mutate(percent = percent(n / sum(n))) %>%
  arrange(desc(n))

```

### Preparing the tidy data frame

```{r}

top4 <- attacks_by_country$source_country[1:4]

top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(source_country, levels = top4)) %>%
  na.omit()

```

### Plotting Multiple Calendar heatmaps

```{r}
ggplot(top4_attacks, aes(hour, wkday, fill = n)) + 
  geom_tile(color = "white", linewidth = 0.1) +
  
  theme_tufte() +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low  = "sky blue",
                      high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL,
       title = "Attacks by weekday and time of day")+
  
  theme_bw()+
  
  theme(axis.ticks = element_blank(), 
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6),
        axis.text.x = element_text(angle = 90, 
                                   vjust = 0.5, 
                                   hjust = 0.5))

```

# Cycle Plot

### Data Import

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
```

### Deriving month and year fields

```{r}

air$month <- factor(month(air$`Month-Year`),
                    levels = 1:12,
                    labels = month.abb,
                    ordered = TRUE)

air$year <- year(ymd(air$`Month-Year`))

```

### Extracting the target country

```{r}
Vietnam <- air %>%
  select(`Vietnam`, month, year) %>%
  filter(year >= 2010)
```

### Compute year average arrivals by month

```{r}
hline.data <- Vietnam %>%
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

### Plotting the cycle plot

```{r, fig.width=20}
ggplot() +
  geom_line(data = Vietnam, 
            aes(x = year, y = `Vietnam`, group = month), colour = "black")+
  geom_hline(data = hline.data, aes(yintercept = avgvalue), linetype = 6, colour = "red", size = 0.5) +
  facet_grid(~month) +
  labs(axis.text.x = element_blank(), 
       title = "Visitor arrivals from Vietnam by air, Jan 2010 ~ Dec 2019")+
  xlab("")+
  ylab("No. of Visitors")+
  theme_bw()+
  theme(axis.text.x = element_text(angle = 70, 
                                   vjust = 0.5, 
                                   hjust = 0.5))
```
